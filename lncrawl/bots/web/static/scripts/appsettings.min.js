(function (document, window) {
	"use strict"; function encodeCookies(parsedCookies) {
		return `${parsedCookies.fontSize}, ${parsedCookies.fontFamily}, ${parsedCookies.darkMode}, ${parsedCookies.lang}`
	}

	function parseCookie(encodedCookie) {
		if (encodedCookie) {
			var c = decodeURI(encodedCookie).split("%2C ");
			try {
				return {
					fontSize: parseInt(c[0]),
					fontFamily: c[1],
					darkMode: c[2] === "true" ? !0 : !1,
					lang: c[3],
				}
			}
			catch (e) { }
		}

		return {
			fontSize: 16,
			fontFamily: "default",
			darkMode: !1,
			lang: "en",
		}
	}

	function a() {
		var t = document.createElement("style");
		return t.id = "font_range_slider_style",
			document.body.appendChild(t),
			t
	}

	function v(n) {
		var e = ["webkit-slider-runnable-track", "moz-range-track", "ms-track"];
		var o = 100 / (fontIncrementList.length - 1),
			t = (n - 1) * o,
			r = "",
			f,
			i;
		for ($(".range-fontsize .range-labels li").removeClass("active selected"),
			f = $(".range-fontsize .range-labels").find("li:nth-child(" + n + ")"),
			f.addClass("active selected"),
			f.prevAll().addClass("selected"), i = 0; i < e.length; i++)
			(r += ".range-fontsize .range {background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) " + t + "%, transparent " + t + "%, transparent 100%)}"),
				(r += ".range-fontsize .range input::-" + e[i] + "{background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) " + t + "%, #b2b2b2 " + t + "%, #b2b2b2 100%)}");
		return r;
	}

	function y(n) {
		var t = fontIncrementList.indexOf(n);
		r.fontRangeInput.val(t + 1).trigger("input")
	}

	function setHtmlFontSize(fontSize) {
		var t = fontIncrementList.indexOf(fontSize);
		r.fontRangeSheet.textContent = v(t + 1);
		r.contentElement.css("font-size", fontSize);

		if (t == fontIncrementList.lenght - 1) {
			r.fontPlusBtn.addClass("isDisabled");

		} else if (t == 0) {
			r.fontMinusBtn.addClass("isDisabled");

		} else {
			r.fontMinusBtn.removeClass("isDisabled");
			r.fontPlusBtn.removeClass("isDisabled");
		}

	}

	function setHtmlFontFamily(font) {
		function findFontFamilyClass(_, t) {
			return (t.match(/(^|\s)font_\S+/g) || []).join(" ")
		}

		r.contentElement.removeClass(findFontFamilyClass);
		r.contentElement.addClass(`font_${font}`);
		$(`input[name=${r.switchFontFamilyInputName}][value=${font}]`).prop("checked", !0)
	}

	function setHtmlDarkMode(darkModeBtn, darkMode) {
		if (darkMode === !0) {
			$(".action-select a[data-tool='nightmode_switch'] i").removeClass("icon-moon").addClass("icon-sun"),
				darkModeBtn.find("i").removeClass("icon-moon").addClass("icon-sun"),
				darkModeBtn.attr("data-content", "Light Theme"),
				$("html").attr("theme", "dark").attr("bgcolor", "black").attr("hgcolor", "purple")
		} else {
			$(".action-select a[data-tool='nightmode_switch'] i").removeClass("icon-sun").addClass("icon-moon"),
				darkModeBtn.find("i").removeClass("icon-sun").addClass("icon-moon"),
				darkModeBtn.attr("data-content", "Dark Theme"),
				$("html").attr("theme", "light").attr("bgcolor", "white").attr("hgcolor", "purple")
		}



	}


	function setCookie() {
		Cookies.set("lnusrconf", encodeCookies(parsedCookie))
	}


	var fontIncrementList = [14, 16, 18, 20, 22, 24, 26, 28]
	var r = {
		fontPlusBtn: $("#fontplus, #svgFontPlus"),
		fontMinusBtn: $("#fontminus, #svgFontMinus"),
		fontRangeInput: $(".range-fontsize .range input"),
		darkModeSwitchBtn: $(".nightmode_switch"),
		switchFontFamilyInputName: "radioFont",
		contentElement: $(".chapter-content"),
		fontRangeSheet: null
	}
	var parsedCookie = parseCookie(Cookies.get("lnusrconf"))
	var e = {
		lnconfig: parsedCookie,
		init: function () {
			parsedCookie || (parsedCookie = {
				fontSize: 16,
				fontFamily: "default",
				darkMode: false,
				lang: "en",
			},
				setCookie()
			);

			r.fontRangeSheet = a();
			y(parsedCookie.fontSize);
			setHtmlFontSize(parsedCookie.fontSize);
			r.fontRangeInput.on("input", function () {
				var n = parseInt(this.value - 1),
					t = fontIncrementList[n]; parsedCookie.fontSize = t;
				setHtmlFontSize(parsedCookie.fontSize);
				setCookie()
			})
		}
	};

	$(".range-fontsize .range-labels li").on("click", function () {
		var n = $(this).index();
		r.fontRangeInput.val(n + 1).trigger("input")

	});

	r.fontPlusBtn.on("click", function () {
		var n = fontIncrementList.indexOf(parsedCookie.fontSize);
		n + 1 < fontIncrementList.length && (r.fontRangeInput.val(n + 1 + 1).trigger("input"),
			parsedCookie.fontSize = fontIncrementList[n + 1],
			setHtmlFontSize(parsedCookie.fontSize),
			setCookie())
	});

	r.fontMinusBtn.on("click", function () {
		var n = fontIncrementList.indexOf(parsedCookie.fontSize);
		n - 1 >= 0 && (r.fontRangeInput.val(n + 1 - 1).trigger("input"),
			parsedCookie.fontSize = fontIncrementList[n - 1],
			setHtmlFontSize(parsedCookie.fontSize), setCookie())

	});

	$(`input[name=${r.switchFontFamilyInputName}]`).change(function () {
		parsedCookie.fontFamily = this.value;
		setHtmlFontFamily(parsedCookie.fontFamily);
		setCookie()
	});

	r.darkModeSwitchBtn.on("click", function () {
		parsedCookie.darkMode = !parsedCookie.darkMode;
		setHtmlDarkMode(r.darkModeSwitchBtn, parsedCookie.darkMode);
		setCookie()
	});

	setHtmlDarkMode(r.darkModeSwitchBtn, parsedCookie.darkMode);
	setHtmlFontFamily(parsedCookie.fontFamily);

	if (typeof define == "function" && define.amd) {
		return define([], function () { return e })
	}

	return window.lnwSettingsFunc = e, e.init(), e



})(document, window);
